; 🔥 What is Redis?

; Redis (Remote Dictionary Server) is an open-source, in-memory data store that can act as a:
; 	•	Database (stores key-value pairs)
; 	•	Cache (super-fast data retrieval)
; 	•	Message broker (pub/sub for real-time communication)

; Because Redis keeps data in RAM, it’s extremely fast (sub-millisecond latency). You can also persist data to disk if needed.

; ⸻

; ✅ Why Redis is Used?
; 	1.	Caching → Store frequently accessed data (API results, sessions) → reduces load on main DB.
; 	2.	Session Management → Store user sessions (tokens, cart items) for quick access.
; 	3.	Rate Limiting → Count API requests per user/IP → block if limit exceeded.
; 	4.	Pub/Sub (Messaging) → Real-time notifications, chat systems.
; 	5.	Queues / Task Management → Background jobs (Bull, Celery).

; ⸻

; ✅ Redis Data Structures

; Redis is not just key-value strings. It supports:
; 	•	Strings → "user:1" : "Srikanth"
; 	•	Hashes → { id:1, name:"Srikanth", age:25 }
; 	•	Lists → Like a linked list (LPUSH, RPUSH)
; 	•	Sets → Unique values (SADD, SMEMBERS)
; 	•	Sorted Sets → Ranking systems (leaderboards).

; ⸻

; ✅ Example Use Cases (with Node.js)

; 1. Caching API Responses
; import express from 'express';
; import fetch from 'node-fetch';
; import { createClient } from 'redis';

; const app = express();
; const redisClient = createClient();
; await redisClient.connect();

; // Middleware to check cache
; async function cache(req, res, next) {
;   const { id } = req.params;
;   const data = await redisClient.get(`post:${id}`);
;   if (data) {
;     return res.json(JSON.parse(data)); // serve from cache
;   }
;   next();
; }

; app.get('/posts/:id', cache, async (req, res) => {
;   const { id } = req.params;
;   const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}`);
;   const post = await response.json();
;   await redisClient.setEx(`post:${id}`, 3600, JSON.stringify(post)); // cache for 1 hr
;   res.json(post);
; });

; app.listen(3000, () => console.log("Server running on 3000"));
; ➡️ First request → fetches from API + stores in Redis.
; ➡️ Next requests → served instantly from Redis.

; ⸻

; 2. Rate Limiter (Protect API)
; async function rateLimiter(req, res, next) {
;   const ip = req.ip;
;   const requests = await redisClient.incr(ip);

;   if (requests === 1) {
;     await redisClient.expire(ip, 60); // reset after 60s
;   }

;   if (requests > 5) {
;     return res.status(429).send("Too many requests, try again later.");
;   }

;   next();
; }

; app.use(rateLimiter);
; async function rateLimiter(req, res, next) {
;   const ip = req.ip;
;   const requests = await redisClient.incr(ip);

;   if (requests === 1) {
;     await redisClient.expire(ip, 60); // reset after 60s
;   }

;   if (requests > 5) {
;     return res.status(429).send("Too many requests, try again later.");
;   }

;   next();
; }

; app.use(rateLimiter);