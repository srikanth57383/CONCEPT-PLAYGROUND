// âœ… React.js Interview Topics & Questions

// ðŸ”¹ 1. What is React? Why is it popular?
// 	â€¢	What is React?
// 	â€¢	Why is React considered better than other libraries?
// 	â€¢	What are the advantages of using React?


// ðŸ”¹ 2. What is SPA (Single Page Application)?
// 	â€¢	What is a Single Page Application?
// 	â€¢	How does routing work in SPAs?

// ðŸ”¹ 3. What is JSX?
// 	â€¢	What is JSX in React?
// 	â€¢	Can React work without JSX?

// â¸»


// ðŸ”¹ 4. Functional vs Class Components
// 	â€¢	What is the difference between functional and class components?
// 	â€¢	Which one is recommended in modern React and why?

// â¸»

// ðŸ”¹ 5. Stateless vs Stateful Components
// 	â€¢	What is a stateless component?
// 	â€¢	What is a stateful component?
// 	â€¢	When should you use each?

// â¸»

// ðŸ”¹ 6. State and Props
// 	â€¢	What is the difference between state and props?
// 	â€¢	Can props be changed inside a component?
// 	â€¢	When should state be used?

// â¸»

// ðŸ”¹ 7. Controlled vs Uncontrolled Components
// 	â€¢	What is a controlled component?
// 	â€¢	What is an uncontrolled component?
// 	â€¢	Which is better and why?

// â¸»

// ðŸ”¹ 8. Keys in React
// 	â€¢	Why are keys used in React lists?
// 	â€¢	What happens if keys are not used?

// â¸»

// ðŸ”¹ 9. Fragments
// 	â€¢	What are React Fragments?
// 	â€¢	Why and when do we use <React.Fragment> or <> </>?

// â¸»

// ðŸ§© More Advanced React Topics (Only Topics & Questions)

// ðŸ”¹ 10. Lifecycle Methods
// 	â€¢	What are the lifecycle methods in class components?
// 	â€¢	What is the equivalent of lifecycle methods in functional components?

// ðŸ”¹ 11. Hooks
// 	â€¢	What are React Hooks?
// 	â€¢	Explain useState, useEffect, useRef, useMemo, useCallback, useReducer
// 	â€¢	Can hooks be used in class components?

// ðŸ”¹ 12. useEffect Deep Dive
// 	â€¢	What is useEffect used for?
// 	â€¢	How is it different from lifecycle methods?
// 	â€¢	What are the cleanup functions?

// ðŸ”¹ 13. useRef
// 	â€¢	What is useRef?
// 	â€¢	How is it used to access DOM elements or persist values?

// ðŸ”¹ 14. Context API
// 	â€¢	What is the Context API?
// 	â€¢	How is it different from props?
// 	â€¢	How to use Context with useContext?

// ðŸ”¹ 15. React Router
// 	â€¢	What is React Router?
// 	â€¢	How do you implement nested routes?
// 	â€¢	What is useNavigate or useParams?

// ðŸ”¹ 16. Conditional Rendering
// 	â€¢	How do you render components conditionally?
// 	â€¢	What are different ways of conditional rendering?

// ðŸ”¹ 17. Lists and Keys
// 	â€¢	How do you render lists in React?
// 	â€¢	Why should keys be unique?

// ðŸ”¹ 18. Lifting State Up
// 	â€¢	What is lifting state up?
// 	â€¢	Why and how is it done?

// ðŸ”¹ 19. Higher-Order Components (HOC)
// 	â€¢	What is a Higher-Order Component?
// 	â€¢	Give an example and use case.

// ðŸ”¹ 20. Controlled Forms
// 	â€¢	How do you build controlled forms in React?
// 	â€¢	How do you handle validation?

// ðŸ”¹ 21. Error Boundaries
// 	â€¢	What are Error Boundaries?
// 	â€¢	How are they implemented?

// ðŸ”¹ 22. React.memo and useMemo
// 	â€¢	What is React.memo?
// 	â€¢	How does useMemo improve performance?

// ðŸ”¹ 23. Code Splitting / Lazy Loading
// 	â€¢	What is React.lazy and Suspense?
// 	â€¢	Why and how is lazy loading used?

// ðŸ”¹ 24. Custom Hooks
// 	â€¢	What is a custom hook?
// 	â€¢	When do you create one?

// ðŸ”¹ 25. Reconciliation
// 	â€¢	What is reconciliation in React?
// 	â€¢	How does the virtual DOM work?

// â¸»

// ðŸ§  Bonus: Ecosystem & Best Practices

// ðŸ”¹ Redux (Optional)
// 	â€¢	What is Redux?
// 	â€¢	What is useSelector and useDispatch?

// ðŸ”¹ React Performance Optimization
// 	â€¢	How to prevent unnecessary re-renders?
// 	â€¢	What are performance tips for React?

// ðŸ”¹ Testing in React
// 	â€¢	What are ways to test React components?
// 	â€¢	What is Jest and React Testing Library?


